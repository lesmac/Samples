package com.DataInterface.BlueToothHDP;

import com.bpm.R;
import com.controller.controller;
import com.userInterface.BluetoothHDPActivity;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.DialogFragment;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.content.res.Resources;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import android.os.RemoteException;
import android.util.Log;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

public class BluetoothController {
    
    private static final String TAG = "BluetoothHealthActivity";

    // Use the appropriate IEEE 11073 data types based on the devices used.
    // Below are some examples.  Refer to relevant Bluetooth HDP specifications for detail.
    //     0x1007 - blood pressure meter
    //     0x1008 - body thermometer
    //     0x100F - body weight scale
    private static final int HEALTH_PROFILE_SOURCE_DATA_TYPE = 0x1007;

    private static final int REQUEST_ENABLE_BT = 1;
    
    //constant for Button ID 
    private static final int REGISTERAPP = 1;
    private static final int UNREGISTERAPP = 2;
    private static final int CONNECT = 3;
    private static final int DISCONNECT = 4;
    
    
    
    private BluetoothHDPActivity act;
    private ImageView mDataIndicator;
    private TextView mStatusMessage;
    private TextView mConnectIndicator;
    
    private BluetoothAdapter mBluetoothAdapter;
    private BluetoothDevice[] mAllBondedDevices;
    private BluetoothDevice mDevice;
    private int mDeviceIndex = 0;
    private Resources mRes;
    private Messenger mHealthService;
    private boolean mHealthServiceBound;
    
    public BluetoothController(Activity act){
        this.act = (BluetoothHDPActivity) act;
    }
    
    
    //handle the event of bluetooth
    private Handler mIncomingHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                // Application registration complete.
                case BluetoothHDPService.STATUS_HEALTH_APP_REG:
                	//notify user                
                
                    mStatusMessage.setText(
                            String.format(mRes.getString(R.string.status_reg),
                            msg.arg1));
                    break;
                // Application unregistration complete.
                case BluetoothHDPService.STATUS_HEALTH_APP_UNREG:
                	//notify user
                    mStatusMessage.setText(
                            String.format(mRes.getString(R.string.status_unreg),
                            msg.arg1));
                    break;
                // Reading data from HDP device.
                case BluetoothHDPService.STATUS_READ_DATA:
                	//get data passing to analyzer
                	//notify user
                    mStatusMessage.setText(mRes.getString(R.string.read_data));
                    mDataIndicator.setImageLevel(1);
                    break;
                // Finish reading data from HDP device.
                case BluetoothHDPService.STATUS_READ_DATA_DONE:
                	//should destroy channel
                	
                    mStatusMessage.setText(mRes.getString(R.string.read_data_done));
                    mDataIndicator.setImageLevel(0);
                    break;
                // Channel creation complete.  Some devices will automatically establish
                // connection.
                case BluetoothHDPService.STATUS_CREATE_CHANNEL:
                	//check result, it could be OK or failed
                	// if it's failed, handle it
                    mStatusMessage.setText(
                            String.format(mRes.getString(R.string.status_create_channel),
                            msg.arg1));
                    mConnectIndicator.setText(R.string.connected);
                    break;
                // Channel destroy complete.  This happens when either the device disconnects or
                // there is extended inactivity.
                case BluetoothHDPService.STATUS_DESTROY_CHANNEL:
                	//check result, it could be OK or failed
                	// if it's failed, handle it
                    mStatusMessage.setText(
                            String.format(mRes.getString(R.string.status_destroy_channel),
                            msg.arg1));
                    mConnectIndicator.setText(R.string.disconnected);
                    break;
                default:
                    super.handleMessage(msg);
            }
        }
    };
    
    private final Messenger mMessenger = new Messenger(mIncomingHandler);
    
    // Intent filter and broadcast receive to handle Bluetooth on event.
    private IntentFilter initIntentFilter() {
        IntentFilter filter = new IntentFilter();
        filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
        return filter;
    }

    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            final String action = intent.getAction();
            if (BluetoothAdapter.ACTION_STATE_CHANGED.equals(action)) {
                if (intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.ERROR) ==
                    BluetoothAdapter.STATE_ON) {
                	BTinit();
                }
            }
        }
    };
    
    
    
    
    public boolean actOncreat(){
    	 mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
         if (mBluetoothAdapter == null) {
             Toast.makeText(act, R.string.bluetooth_not_available, Toast.LENGTH_LONG);
             act.finish();
             return false;
         }
         mConnectIndicator = (TextView) act.findViewById(R.id.connect_ind);
         mStatusMessage = (TextView) act.findViewById(R.id.status_msg);
         mDataIndicator = (ImageView) act.findViewById(R.id.data_ind);
         act.registerReceiver(mReceiver, initIntentFilter());
    	 return true;
    }
    
    public void actOndestroy(){
        if (mHealthServiceBound) act.unbindService(mConnection);
        act.unregisterReceiver(mReceiver);
    }
    
    public void actOnstart(){
    	if (!mBluetoothAdapter.isEnabled()) {
            Intent enableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            act.startActivityForResult(enableIntent, REQUEST_ENABLE_BT);
        } else {
            BTinit();
        }
    }
    
    public void actOnActivityResult(int requestCode, int resultCode, Intent data){
    	switch (requestCode) {
        case REQUEST_ENABLE_BT:
            if (resultCode == Activity.RESULT_OK) {
                BTinit();
            } else {
                act.finish();
                return;
            }
        }
    }
    
    

    
    
    
 // Sends a message to {@link BluetoothHDPService}.
    private void sendMessage(int what, int value) {
        if (mHealthService == null) {
            Log.d(TAG, "Health Service not connected.");
            return;
        }

        try {
            mHealthService.send(Message.obtain(null, what, value, 0));
        } catch (RemoteException e) {
            Log.w(TAG, "Unable to reach service.");
            e.printStackTrace();
        }
    }

    // Sends an update message, along with an HDP BluetoothDevice object, to
    // {@link BluetoothHDPService}.  The BluetoothDevice object is needed by the channel creation
    // method.
    private void sendMessageWithDevice(int what) {
        if (mHealthService == null) {
            Log.d(TAG, "Health Service not connected.");
            return;
        }

        try {
            mHealthService.send(Message.obtain(null, what, mDevice));
        } catch (RemoteException e) {
            Log.w(TAG, "Unable to reach service.");
            e.printStackTrace();
        }
    }
    
    
    
    
    public void setDevice(int position) {
        mDevice = this.mAllBondedDevices[position];
        mDeviceIndex = position;
    }

    public void connectChannel() {
        sendMessageWithDevice(BluetoothHDPService.MSG_CONNECT_CHANNEL);
    }

    private void disconnectChannel() {
        sendMessageWithDevice(BluetoothHDPService.MSG_DISCONNECT_CHANNEL);
    }
    
    private void BTinit(){
    	 // Starts health service.
        Intent intent = new Intent(act, BluetoothHDPService.class);
        act.startService(intent);
        act.bindService(intent, mConnection, Context.BIND_AUTO_CREATE);
    	
    }
    
    private ServiceConnection mConnection = new ServiceConnection() {
        public void onServiceConnected(ComponentName name, IBinder service) {
            mHealthServiceBound = true;
            Message msg = Message.obtain(null, BluetoothHDPService.MSG_REG_CLIENT);
            msg.replyTo = mMessenger;
            mHealthService = new Messenger(service);
            try {
                mHealthService.send(msg);
            } catch (RemoteException e) {
                Log.w(TAG, "Unable to register client to service.");
                e.printStackTrace();
            }
        }

        public void onServiceDisconnected(ComponentName name) {
            mHealthService = null;
            mHealthServiceBound = false;
        }
    };
    
    /**
     * Dialog to display a list of bonded Bluetooth devices for user to select from.  This is
     * needed only for channel connection initiated from the application.
     */
    public static class SelectDeviceDialogFragment extends DialogFragment {

        public static SelectDeviceDialogFragment newInstance(String[] names, int position) {
            SelectDeviceDialogFragment frag = new SelectDeviceDialogFragment();
            Bundle args = new Bundle();
            args.putStringArray("names", names);
            args.putInt("position", position);
            frag.setArguments(args);
            return frag;
        }

        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {
            String[] deviceNames = getArguments().getStringArray("names");
            int position = getArguments().getInt("position", -1);
            if (position == -1) position = 0;
            return new AlertDialog.Builder(getActivity())
                    .setTitle(R.string.select_device)
                    .setPositiveButton(R.string.ok,
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                ((BluetoothHDPActivity) getActivity()).connectChannel();
                            }
                        })
                    .setSingleChoiceItems(deviceNames, position,
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                ((BluetoothHDPActivity) getActivity()).setDevice(which);
                            }
                        }
                    )
                    .create();
        }
    }


	public void Buttonhandler(int id) {
		// handler the event from button
		switch (id){
		    case 1: sendMessage(BluetoothHDPService.MSG_REG_HEALTH_APP,
                    HEALTH_PROFILE_SOURCE_DATA_TYPE);
		            break;
		            
		    case 2: sendMessage(BluetoothHDPService.MSG_UNREG_HEALTH_APP, 0);
		            break;
		            
		    case 3: mAllBondedDevices =
                    (BluetoothDevice[]) mBluetoothAdapter.getBondedDevices().toArray(
                            new BluetoothDevice[0]);

                    if (mAllBondedDevices.length > 0) {
                       int deviceCount = mAllBondedDevices.length;
                       if (mDeviceIndex < deviceCount) mDevice = mAllBondedDevices[mDeviceIndex];
                       else {
                            mDeviceIndex = 0;
                            mDevice = mAllBondedDevices[0];
                       }
                       String[] deviceNames = new String[deviceCount];
                       int i = 0;
                       for (BluetoothDevice device : mAllBondedDevices) {
                          deviceNames[i++] = device.getName();
                       }
                       SelectDeviceDialogFragment deviceDialog =
                            SelectDeviceDialogFragment.newInstance(deviceNames, mDeviceIndex);
                       deviceDialog.show(act.getFragmentManager(), "deviceDialog");  
                    }
                    break;
                    
		    case 4: disconnectChannel();
		    	    break;
		    	    
		    default: break; 	    
		}        
		        
		
	}
    
}
